<template>
    <view class="calendar-box">
        <view class="calendar-wrapper">
            <view class="calendar-panel">
                <view class="date-befor" data-id="0" data-type="month" bindtap='dataBefor'>
                    <text class="iconfont">
                        <text class='left color'></text>
                    </text>
                </view>
                <view class="calendar-panel-box" bindtap="openYear">
                    <view>{{canlender.year}}年</view>
                    <view>{{canlender.month}}月</view>
                </view>
                <view wx:if="{{showAllYear}}" class="yearSelction">
                    <picker-view indicator-style="height: 36px;" style="width: 100%; height: 200px;" value="{{selectValue}}" bindchange="changeYear">
                        <picker-view-column>
                            <view wx:for="{{years}}" wx:key="item" class="selectLine">{{item}}年</view>
                        </picker-view-column>
                        <picker-view-column>
                            <view wx:for="{{months}}" wx:key="item" class="selectLine">{{item}}月</view>
                        </picker-view-column>
                        <picker-view-column>
                            <view wx:for="{{days}}" wx:key="item" class="selectLine">{{item}}日</view>
                        </picker-view-column>
                    </picker-view>
                <button type="default" plain="true" bindtap="confirmYMD">确定</button>
                </view>
                <view class="date-after" data-id="1" data-type="month" bindtap='dataBefor'>
                    <text class="iconfont">
                        <text class='right color'></text>
                    </text>
                </view>
            </view>
            <view class="calendar-header">
                <view class="week">日</view>
                <view class="week">一</view>
                <view class="week">二</view>
                <view class="week">三</view>
                <view class="week">四</view>
                <view class="week">五</view>
                <view class="week">六</view>
            </view>
            <view class="calendar-body">
                <block wx:for="{{canlender.weeks}}" wx:for-item="weeks" wx:for-index="week" wx:key="weeks">
                    <view class="calender-body-date-week">
                        <block wx:for="{{weeks}}" wx:for-item="day" wx:key="day">
                            <view class="date {{canlender.month === day.month? '' : 'placeholder'}} {{(day.date==canlender.date||day.checked) && canlender.month == day.month?'date-current': ''}} " 
                                data-week="{{week}}" data-index="{{index}}" data-ischeck="{{canlender.month === day.month}}"
                                bindtap='selectDay'>
                                {{day.date}}
                                <view wx:if="{{day.have}}" class="data-circle"></view>
                            </view>
                        </block>
                    </view>
                </block>
            </view>
        </view>

        <view class="page-section page-section-spacing swiper {{showEvent?'event-box':'no-event'}}">
            <swiper class="swiper-wrap"
                    indicator-dots="{{currEvent.length > 1 ? true : false}}"
                    autoplay="{{autoplay}}" 
                    interval="{{interval}}" 
                    duration="{{duration}}" 
                    indicator-color="#ccc"
                    indicator-active-color="#333"
                    style="height: 610rpx">
                <block wx:for="{{currEvent}}" wx:for-item="event" wx:key="index">
                    <swiper-item class="swiper-item" swiper-item="{{event._id}}">
                        <view class="content-item" data-url="{{event.link}}" bindtap="openUrl">
                            <text class="event-title">{{event.title}}</text>
                            <text class="event-desc">{{event.desc}}</text>
                        </view>
                        <!--<image wx:if="{{event.img}}" class="event-img" src="{{event.img}}" mode="widthFix"></image>-->
                    </swiper-item>
                </block>
            </swiper>
        </view>
    </view>
</template>

<script>
    import { createComponent } from '@mpxjs/core'
    const date = new Date()
    const years = []
    const months = []
    const days = []
    const days28 = [] // 平年2月
    const days29 = []   // 闰年2月
    const days30 = []   // 30天
    const days31 = []   // 大天

    for (let i = date.getFullYear(); i >= 1971; i--) {
        years.push(i)
    }

    for (let i = 1; i <= 12; i++) {
        months.push(i)
    }

    for (let i = 1; i <= 31; i++) {
        if (i == 29) {
            days29.push(i);
            days30.push(i);
            days31.push(i);
        } else if (i == 30) {
            days30.push(i);
            days31.push(i);
        } else if (i == 31) {
            days31.push(i);
        } else {
            days28.push(i);
            days29.push(i);
            days30.push(i);
            days31.push(i);
        }
    }
    Component({
    /**
     * 组件的属性列表
     * data [Date] 当前现实的月份
     * eventList [Array] 所有有语录（事件）的天
     */
    properties: {
        date: {
            type: null,
            value: new Date()
        },
        eventList: {
            type: Array,
            value: [],
            observer(newVal, oldVal) {
                this.getWeek(new Date())
            }
        },
    },

    /**
     * 组件的初始数据
     */
    data: {
        showAllYear: false, // 是否显示年份选择器
        currSelectDay: '', // 当前选择日期
        canlender: {
            "weeks": []
        },
        currTitle: '',
        currSrc: '',
        currEvent: [],
        years,
        months,
        days,
        selectValue: [],
        currYMD: [],
        indicatorDots: true,
        vertical: false,
        autoplay: false,
        interval: 2000,
        duration: 500,
    },
    
    ready() {
        this.getWeek(new Date());
        this.dateSelection();
    },
    /**
     * 组件的方法列表
     */
    methods: {
        // 打开url
        openUrl(e) {
            console.log(e.currentTarget.dataset.url)
            wx.navigateTo({
                url: e.currentTarget.dataset.url,
                events: {
                    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据
                    acceptDataFromOpenedPage: function(data) {
                        console.log('acceptDataFromOpenedPage:',data)
                    },
                    someEvent: function(data) {
                        console.log('someEvent:',data)
                    }
                },
                success: function(res) {
                    // 通过eventChannel向被打开页面传送数据
                    // res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' })
                }
            })
        },
        showTimeLine() {
            console.log('dianji')
        },
        // 确认选择年月日
        confirmYMD () {
            this.setData({
                showAllYear: false,
            })
            const currYMD = this.data.currYMD.length == 3 ? `${this.data.currYMD[0]}-${this.data.currYMD[1]}-${this.data.currYMD[2]}` : `${date.getFullYear()}-01-01`;
            this.getWeek(currYMD)
        },
        // 展开年月日选择器
        openYear(e) {
            this.setData({
                showAllYear: true,
                days: days31,
                currYMD: []
            })
        },
        // 选择年月
        changeYear(e) {
            const val = e.detail.value;
            let cYear = this.data.years[val[0]]
            let cMonth = this.data.months[val[1]]
            // 1.3.5.7.8.10.12 days为31天      2平年闰年    4.6.9.11 days为30天
            if (cMonth == 1 || cMonth == 3 || cMonth == 5 || cMonth == 7 || cMonth == 8 || cMonth == 10 || cMonth == 12) {
                console.log('31天')
                this.setData({
                    days: days31
                })
            } else if (cMonth == 4 || cMonth == 6 || cMonth == 9 || cMonth == 11) {
                console.log('30天')
                this.setData({
                    days: days30
                })
            } else if (cYear % 4 == 0 && cMonth==2) { // 闰年2月
                console.log('闰年2月29天')
                this.setData({
                    days: days29
                })
            } else if (cYear % 4 != 0 && cMonth==2) { // 平年2月
                console.log('平年2月28天')
                this.setData({
                    days: days28
                })
            }
            let cDay = this.data.days[val[2]]
            cMonth = cMonth.length < 2 ? '0'+cMonth : cMonth
            cDay = cDay.length < 2 ? '0'+cDay : cDay
            this.setData({
                currYMD: [cYear, cMonth, cDay]
            })
        },
        dateSelection() {
            this.triggerEvent('select', { ischeck: true })
        },
        selectDay(e) {
            let index = e.currentTarget.dataset.index;
            let week = e.currentTarget.dataset.week;
            let ischeck = e.currentTarget.dataset.ischeck;
            let canlender = this.data.canlender;
            if (!ischeck) return false;
            let month = canlender.weeks[week][index].month < 10 ? "0" + canlender.weeks[week][index].month : canlender.weeks[week][index].month
            let date = canlender.weeks[week][index].date < 10 ? "0" + canlender.weeks[week][index].date : canlender.weeks[week][index].date
            this.getWeek(canlender.year + "-" + month + "-" + date);
        },
        // 返回今天
        backtoday() {
            this.getWeek(new Date());
        },
        // 前一天|| 后一天
        dataBefor(e) {
            let num = 0;
            let types = e.currentTarget.dataset.type;

            if (e.currentTarget.dataset.id === "0") {
                num = -1;
            } else {
                num = 1
            }
            let year = this.data.canlender.year + "-" + this.data.canlender.month + "-" + this.data.canlender.date
            let _date = this.getDate(year, num, types === 'month' ? "month" : "day");
            this.getWeek(_date);
        },
        // 获取日历内容
        getWeek(dateData) {
            console.log(dateData)
            let eventList = this.data.eventList
            let a = new Date()
            // 判断当前是 安卓还是ios ，传入不容的日期格式
            if (typeof dateData !== 'object') {
                dateData = dateData.replace(/-/g, "/")
            }
            let _date = new Date(dateData);
            let year = _date.getFullYear(); //年
            let month = _date.getMonth() + 1;  //月
            let date = _date.getDate();//日
            let day = _date.getDay();// 天
            let canlender = [];
            let dates = {
                firstDay: new Date(year, month - 1, 1).getDay(),
                lastMonthDays: [],// 上个月末尾几天
                currentMonthDys: [], // 本月天数
                nextMonthDays: [], // 下个月开始几天
                endDay: new Date(year, month, 0).getDay(),
                weeks: []
            }
            // 循环上个月末尾几天添加到数组
            for (let i = dates.firstDay; i > 0; i--) {
                dates.lastMonthDays.push({
                    'date': new Date(year, month, -i).getDate() + '',
                    'month': month - 1
                })
            }
            let haveEvent = false; // 当前日期有事件
            // 循环本月天数添加到数组
            for (let i = 1; i <= new Date(year, month, 0).getDate(); i++) {
                let have = false;
                let title = '';
                let src = '';
                for (let j = 0; j < eventList.length; j++) {
                    let selDate = eventList[j].pubdate.split('-');
                    if (Number(year) === Number(selDate[0]) && Number(month) === Number(selDate[1]) && Number(i) === Number(selDate[2])) {
                        have = true;
                        // 判断当天是否有事件
                        if (Number(date) === Number(selDate[2])) {
                            haveEvent = true;
                            this.setData({
                                currEvent: eventList[j].content
                            })
                        }   
                    }

                }
                dates.currentMonthDys.push({
                    'date': i + "",
                    'month': month,
                    have,
                })
            }
            // 循环下个月开始几天 添加到数组
            for (let i = 1; i < 7 - dates.endDay; i++) {
                dates.nextMonthDays.push({
                'date': i + '',
                'month': month + 1
                })
            }

            canlender = canlender.concat(dates.lastMonthDays, dates.currentMonthDys, dates.nextMonthDays)
            // 拼接数组  上个月开始几天 + 本月天数+ 下个月开始几天
            for (let i = 0; i < canlender.length; i++) {
                if (i % 7 == 0) {
                    dates.weeks[parseInt(i / 7)] = new Array(7);
                }
                dates.weeks[parseInt(i / 7)][i % 7] = canlender[i]
            }


            // 渲染数据
            this.setData({
                currSelectDay: month + "月" + date + "日",
                "canlender.weeks": dates.weeks,
                'canlender.month': month,
                'canlender.date': date,
                "canlender.day": day,
                'canlender.year': year,
            })
            month = month < 10 ? "0" + month : month
            date = date < 10 ? "0" + date : date
            this.triggerEvent('getdate', { year, month, date })
            if (haveEvent) {
                this.setData({
                    showEvent: true
                })
            } else {
                this.setData({
                    currEvent: [],
                    showEvent: false
                })
            }
        },
        /**
         * 时间计算
         */
        getDate(date, AddDayCount, str = 'day') {
            if (typeof date !== 'object') {
                date = date.replace(/-/g, "/")
            }
            let dd = new Date(date)
            switch (str) {
                case 'day':
                dd.setDate(dd.getDate() + AddDayCount)// 获取AddDayCount天后的日期
                break;
                case 'month':
                dd.setMonth(dd.getMonth() + AddDayCount)// 获取AddDayCount天后的日期
                break;
                case 'year':
                dd.setFullYear(dd.getFullYear() + AddDayCount)// 获取AddDayCount天后的日期
                break;
            }
            let y = dd.getFullYear()
            let m = (dd.getMonth() + 1) < 10 ? '0' + (dd.getMonth() + 1) : (dd.getMonth() + 1)// 获取当前月份的日期，不足10补0
            let d = dd.getDate() < 10 ? '0' + dd.getDate() : dd.getDate()// 获取当前几号，不足10补0
            return y + '-' + m + '-' + d
        }
    }
})
</script>

<style lang="stylus">
.timeline-icon {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
}

.event-box {
    width: 80%;
    margin: 20px auto;
    font-size: 30rpx;
    color: #333;
    height: 800rpx;
}
.swiper-wrap {
    width: 100%;
    height: 100%;
    overflow: hidden;
}
.swiper-item {
    height: 100%;
}

.content-item {
    background: #f2f2f2;
    padding: 8px;
    border-radius: 8px;
    box-shadow: 0px 1px 3px rgba(0,0,0,.5);
}
.event-title {
    text-align: left;
    overflow : hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    font-weight: 700;
    font-size: 16px;
    color: #000;
}
.event-desc {
    text-align: left;
    font-weight: 100;
    font-size: 14px;
    color: #666;
    overflow : hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 10;
    -webkit-box-orient: vertical;
    text-indent: 2em;
    margin-top: 8px;
}
.event-box .event-img {
    width: 100%;
    margin-top: 10px;
    height: 100%;
}
.no-event {
    display: none;
}
.calendar-box {
  width: 100%;
  height: 100vh;
  background: #ffffff;
  padding-top: 100rpx;
  box-sizing: border-box;
}

.calendar-wrapper {
  width: 100%;
  border-top: 1px #f5f5f5 solid;
  box-sizing: border-box;
  font-size: 26rpx;
  background: #fff;
}

.calendar-wrapper.active {
  transform: translateY(0%);
}

.header {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  height: 100rpx;
  /* width: 100%; */
  background: #fff;
  /* padding: 0 30rpx; */
  z-index: 10000;
}

.top-jiantou {
  width: 100rpx;
  height: 100rpx;
  text-align: center;
  box-sizing: border-box;
  line-height: 100rpx;
}

.iconfont {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  color: #52b8f5;
  width: 53rpx;
  height: 53rpx;
}

.iconfont .left, .iconfont .right {
  display: block;
  width: 0;
  height: 0;
  border-top: 20rpx solid transparent;
  border-bottom: 20rpx solid transparent;
}

.iconfont .left {
  border-right: 40rpx solid transparent;
}

.iconfont .right {
  border-left: 40rpx solid transparent;
}

.iconfont .left.color {
  border-right-color: #52b8f5;
}

.iconfont .right.color {
  border-left-color: #52b8f5;
}

.btn {
  margin: 0 30rpx;
  width: 240rpx;
  height: 53rpx;
  border: 1rpx solid #52b8f5;
  border-radius: 26rpx;
  color: #52b8f5;
  font-size: 26rpx;
  box-sizing: border-box;
}

.calendar-panel {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 32rpx;
  height: 80rpx;
}


.date-befor, .date-after {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 80rpx;
  width: 80rpx;
  text-align: center;
  line-height: 80rpx;
}

.calendar-panel-box {
  display: flex;
}

.calendar-header {
  display: flex;
}

.calendar-header .week {
  width: 100%;
  text-align: center;
  line-height: 80rpx;
  color: #52b8f5;
}

.calendar-body {
  display: flex;
  flex-wrap: wrap;
}

.calender-body-date-week {
  display: flex;
  width: 100%;
  border-bottom: 1px #f5f5f5 solid;
}

.date {
  position: relative;
  width: 100%;
  text-align: center;
  color: #1c1c1c;
  background: #fff;
  line-height: 100rpx;
}
.date.point {
    position:absolute;
    content: '';
    bottom: 5px;
    left: 50%;
    transform: translateX(-50%);
    width: 15px;
    height: 15px;
    background:#f00;
    border-radius: 50%;
}

.date.active {
  background: red;
}

.placeholder {
  color: #a4a4a4;
}

.date-current {
  background: #52b8f5;
  color: #fff;
}

.data-circle {
  position: absolute;
  bottom: 10rpx;
  left: 0;
  right: 0;
  margin: auto;
  width: 10rpx;
  height: 10rpx;
  border-radius: 50%;
  background: #ff5a5f;
  z-index: 2;
}

.flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}
.yearSelction {
    width: 100%;
    position: fixed;
    bottom: 0;
    left:0;
    z-index: 999;
    background: rgba(255,255,255,.4);
}
.selectLine {
    line-height: 36px; 
    text-align: center;
}
</style>

<script type="application/json">
  {
    "component": true
  }
</script>
